swagger: "2.0"
info:
  title: "Social Media API"
  version: "1.0.0"
host: "localhost:3000"
tags:
- name: "User"
  description: "User management endpoints"
- name: "Post"
  description: "Post management endpoints"
paths:
  /user/sign-up:
    post:
      tags:
      - "User"
      summary: "Register a user"
      parameters:
      - in: "body"
        name: "body"
        description: "User detail to be registered"
        required: true
        schema:
          $ref: "#/definitions/SignUpPayload"
      responses:
        "200":
          description: "User successfully registered"
          schema:
            $ref: "#/definitions/SignUpResponse"
        "400":
          description: "Invalid input"
        "500":
          description: "Internal server error"
  /user/login:
    post:
      tags:
      - "User"
      summary: "Log user in"
      parameters:
      - in: "body"
        name: "body"
        description: "User credential"
        required: true
        schema:
          type: "object"
          properties:
            email:
              type: "string"
              example: "jhon.doe@gmail.com"
            password:
              type: "string"
              example: "secret"
      responses:
        "200":
          description: "User successfully logged in"
          schema:
            $ref: "#/definitions/LoginResponse"
        "400":
          description: "Invalid input"
        "401":
          description: "Invalid credential or invalid token"
        "500":
          description: "Internal server error"
  /user/update:
    put:
      tags:
      - "User"
      summary: "Update user profile"
      parameters:
      - in: "body"
        name: "body"
        description: "New user data"
        required: true
        schema:
          $ref: "#/definitions/UpdateUserPayload"
      - in: "header"
        name: "token"
        description: "User token obtained after logged in"
        required: true
        type: "string"
      responses:
        "200":
          description: "User data successfully updated"
          schema:
            type: "object"
            properties:
              error:
                type: "boolean"
                example: false
              message:
                type: "string"
                example: "User updated"
        "400":
          description: "Invalid input"
        "401":
          description: "Invalid token or invalid user credential"
        "500":
          description: "Internal server error"
  /user/follow:
    put:
      tags:
      - "User"
      summary: "Follow other user"
      parameters:
      - in: "body"
        name: "body"
        required: true
        schema:
          type: "object"
          properties:
            followedUserId:
              type: "string"
              example: "64c9c3f023516c516d3a0118"
      - in: "header"
        name: "token"
        description: "User token obtained after logged in"
        required: true
        type: "string"
      responses:
        "200":
          description: "User data successfully updated"
          schema:
            type: "object"
            properties:
              error:
                type: "boolean"
                example: false
              message:
                type: "string"
                example: "User updated"
        "400":
          description: "Invalid input"
        "401":
          description: "Invalid token or invalid user credential"
        "404":
          description: "No followed user found"
          schema:
            $ref: "#/definitions/NoFollowedUserFoundResponse"
        "409":
          description: "Re-follow same user is not allowed"
          schema:
            $ref: "#/definitions/RefollowSameUserResponse"
        "500":
          description: "Internal server error"
  /user/feed:
    get:
      tags:
      - "User"
      summary: "User posts feed"
      parameters:
      - in: "header"
        name: "token"
        description: "User token obtained after logged in"
        required: true
        type: "string"
      responses:
        "200":
          description: "User data successfully updated"
          schema:
            $ref: "#/definitions/UserFeedResponse"
        "401":
          description: "Invalid token or invalid user credential"
        "500":
          description: "Internal server error"
  /posts:
    post:
      tags:
      - "Post"
      summary: "Create a user post"
      consumes:
        - multipart/form-data
      parameters:
      - in: formData
        name: image
        type: file
        description: "Post image"
        required: true
      - in: formData
        name: content
        type: string
        description: "Post content"
        required: true
      - in: "header"
        name: "token"
        description: "Token obtained after logged in"
        required: true
        type: "string"
      responses:
        "200":
          description: "Post created successfully"
          schema:
            $ref: "#/definitions/CreatePostResponse"
        "400":
          description: "Invalid input"
        "401":
          description: "Invalid token or invalid user credential"
        "500":
          description: "Internal server error"
    put:
      tags:
      - "Post"
      summary: "Update user post"
      parameters:
      - in: "body"
        name: "body"
        description: "New post data"
        required: true
        schema:
          type: "object"
          properties:
            id:
              type: "string"
              example: "64c9c3bba2ff9d64966bc180"
            content:
              type: "string"
              example: "Hey there this is my first post"
      - in: "header"
        name: "token"
        description: "Token obtained after logged in"
        required: true
        type: "string"
      responses:
        "200":
          description: "Post created successfully"
          schema:
            $ref: "#/definitions/UpdatePostResponse"
        "400":
          description: "Invalid input"
        "401":
          description: "Invalid token or invalid user credential"
        "500":
          description: "Internal server error"
  /posts/{postId}:
    delete:
      tags:
      - "Post"
      summary: "Delete user post"
      parameters:
      - in: "path"
        name: "postId"
        type: "string"
        description: "New post data"
        required: true
      - in: "header"
        name: "token"
        description: "Token obtained after logged in"
        required: true
        type: "string"
      responses:
        "200":
          description: "Post created successfully"
          schema:
            $ref: "#/definitions/DeletePostResponse"
        "404":
          description: "Post not found"
          schema:
            $ref: "#/definitions/PostNotFoundResponse"
        "400":
          description: "Invalid input"
        "401":
          description: "Invalid token or invalid user credential"
        "500":
          description: "Internal server error"
  /posts/like:
    put:
      tags:
      - "Post"
      summary: "Like a post"
      parameters:
      - in: "body"
        name: "body"
        description: "liked postId"
        required: true
        schema:
          type: "object"
          properties:
            postId:
              type: "string"
              example: "64c9c3f023516c516d3a0118"
      - in: "header"
        name: "token"
        description: "Token obtained after logged in"
        required: true
        type: "string"
      responses:
        "200":
          description: "Post created successfully"
          schema:
            type: "object"
            properties:
              error:
                type: "boolean"
                example: false
              message:
                type: "string"
                example: "Successfully liked a post."
        "404":
          description: "Post not found"
          schema:
            $ref: "#/definitions/PostNotFoundResponse"
        "400":
          description: "Invalid input"
        "401":
          description: "Invalid token or invalid user credential"
        "500":
          description: "Internal server error"
  /posts/comment:
    post:
      tags:
      - "Post"
      summary: "Add comment on a post"
      parameters:
      - in: "body"
        name: "body"
        description: "liked postId"
        required: true
        schema:
          type: "object"
          properties:
            postId:
              type: "string"
              example: "64c9c3f023516c516d3a0118"
            content:
              type: "string"
              example: "this post is so cool!"
      - in: "header"
        name: "token"
        description: "Token obtained after logged in"
        required: true
        type: "string"
      responses:
        "200":
          description: "Post created successfully"
          schema:
            type: "object"
            properties:
              error:
                type: "boolean"
                example: false
              message:
                type: "string"
                example: "Comment added."
        "400":
          description: "Invalid input"
        "401":
          description: "Invalid token or invalid user credential"
        "500":
          description: "Internal server error"
definitions:
  SignUpPayload:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Jhon Doe"
      email:
        type: "string"
        example: "jhon.doe@gmail.com"
      password:
        type: "string"
        example: "secret"
  SignUpResponse:
    type: "object"
    properties:
      error:
        type: "boolean"
        example: "false"
      message:
        type: "string"
        example: "Signup successfull!"
      user:
        $ref: "#/definitions/UserDetail"
  UserDetail:
    type: "object"
    properties:
      _id:
        type: "string"
        example: "64c83dfbb4b84bf3e29edaae"
      fullName:
        type: "string"
        example: "Jhon Doe"
      email:
        type: "string"
        example: "jhon.doe@gmail.com"
  UpdateUserPayload:
    type: "object"
    properties:
      fullName:
        type: "string"
        example: "Jhon Doe"
      email:
        type: "string"
        example: "jhon.doe@gmail.com"
      password:
        type: "string"
        example: "secret"
  LikedCommentedByArray:
    type: "array"
    items:
      type: "object"
      properties:
        _id:
          type: "string"
          example: "64c9c3bba2ff9d64966bc180"
        author:
          $ref: "#/definitions/UserDetail"
  PostDetail:
    type: "object"
    properties:
      _id:
        type: "string"
        example: "64c9c3f023516c516d3a0118"
      content:
        type: "string"
        example: "hi there lisdas post is here"
      user:
        $ref: "#/definitions/UserDetail"
      likedBy:
        $ref: "#/definitions/LikedCommentedByArray"
      comments:
        $ref: "#/definitions/LikedCommentedByArray"
  UserFeedResponse:
    type: "object"
    properties:
      error: 
        type: "boolean"
        example: "false"
      posts:
        type: "array"
        items:
          $ref: "#/definitions/PostDetail"
  NoFollowedUserFoundResponse:
    type: "object"
    properties:
      error:
        type: "boolean"
        example: true
      errorMessage:
        type: "string"
        example: "No followed user found"
  RefollowSameUserResponse:
    type: "object"
    properties:
      error:
        type: "boolean"
        example: true
      errorMessage:
        type: "string"
        example: "Re-follow same user not allowed."
  CreatePostResponse:
    type: "object"
    properties:
      error:
        type: "boolean"
        example: false
      message:
        type: "string"
        example: "Post created"
  UpdatePostResponse:
    type: "object"
    properties:
      error:
        type: "boolean"
        example: false
      message:
        type: "string"
        example: "Post with id 64c9c3bba2ff9d64966bc180 successfully updated"
  DeletePostResponse:
    type: "object"
    properties:
      error:
        type: "boolean"
        example: false
      message:
        type: "string"
        example: "Post with id 64c9c3bba2ff9d64966bc180 successfully deleted"
  PostNotFoundResponse:
    type: "object"
    properties:
      error:
        type: "boolean"
        example: true
      errorMessage:
        type: "string"
        example: "Post not found"
  LoginResponse:
    type: "object"
    properties:
      error:
        type: "boolean"
        example: "false"
      message:
        type: "string"
        example: "Signup successfull!"
      user:
        allOf:
          - $ref: "#/definitions/UserDetail"
          - type: "object"
            properties:
              token:
                type: "string"
                example: "eyJhbGciOiJIUzI1NiIsInR5cC..."